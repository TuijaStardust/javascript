"We can talk to a server in order to send and receive data."

User of an app (Web browser) sends a request to a server
-> Server sends back response 

Why do we want to use a server?
- Communication: let users access the app (App needs to be able to listen to incoming requests and send back responses )
- Trusted environment for running the code; The code can't be tampered/manipulated by the user of the application 

JavaScript language
    -> JS in the web browser environment
    -> JS in a server environment: node.js 

"Web browser does web browser'ish things, node.js does general computer'ish things" 

NODE.JS
=======  

- Ability to create files and folders to computer hard-drive
- Ability to listen to incoming network requests
- etc...

# Executing node in terminal; filename doesn't require .js ending
node [filename]

npm = node package manager

# create package.json file for the project
npm init -y


EXPRESS (node package)
=======

Designed for creating web-servers; Pre-written JS code for Node environment that can be leveraged
Express provides functions and methods that are designed for creating web-servers

# Installing Express (to project folder)
npm install express 

>> Downloads Express AND all the packages Express DEPENDS 


Refreshing node server automatically with "nodemon" package
-----------------------------------------------------------
npm install nodemon

# open package.json file
# -> Add a new script to "scripts" object
    "watch": "nodemon [filename]",
# run the script
npm run watch

*****
# action attribute in <form> tag defines the url where the form sends it request to when the user submits the form
# name attribute in <input> tag
<form action="/create-item" method="POST">
    <input name="item"> 

***
SECURITY
npm install sanitize-html
